// COPYRIGHT NOTICE
//  This file is part of isingZ, a program to compute partition
//      functions and free energies for domain walls in 2D Ising models.
//  Copyright 2012 by Creighton K. Thomas (creightonthomas@gmail.com),
//                    A. Alan Middleton (aam@syr.edu)
//  The development of this software was supported in part by the National Science
//  Foundation under grant DMR-1006731.
// 
//  The program isingZ is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
// 
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//  
//  See http://www.gnu.org/licenses/gpl.txt for more details.
//  

// exp_log.cc

#include "exp_log.h"
#include <iostream>
#include <cstdlib> // for exit()

dataType  exp_log::pi("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275901",5120);  // to 2000 digits
//dataType  exp_log::cutoff("26881171418161354484126255515800135873611118.773741922415191608615280287034909564914158871097219845710811670879190576068697597709761868233548459638929871966089629133626120029380957276534032962269865668016917743514451846065162804442237756762296960284731911402129862281040057911593878790384974173340084912432828126815454426051808828625966509400466909061913524438639583841122043462819154207236890854072607324573056121191956563061586837963987473981118520972596579623700832132946484765326938028548010330841221938884256148024505761068512936611323088094816524174698942447852066586364885647903608017886718884752296369046506574772965737784770742124701455491350397981671399956789869946372196199563429086748183882144256575051854305478968111655024258358000923013493720349842661807049197483416041388719053731440684143813192220471115258836851737585307465440313681612976430832569794563460948174680788271322898526056311817137593447744424308982958463985133222455424311465407701679834598619594591622838745385531521325971233888340981842858179202904184873352541736338696823628360671897209471789305037450068843728126040724464269914428534148661653680570192308869700359343682493378336755358629136792426672394987100275140183146093087554977303109782372762237021270132015807552274641579485116714671562692663681086288731527076512296219519984509365334628597245667862994538497607682112199899784966814823582714526365214247897044461682774881703514784736503229211389158396332048953680861434956162422055093119820899901011293773152282820010161175205494987962524968951399514396958144156360641001071759521595140104980669095670187705170959629892547253198709254955841071746737554998707969478120410286583225510792695745331397899778203721496852646321851422868441359465912620633498367001776249151104088141461436268006246612342593899735170064210298874307794785385220851406971131388655499230608418396182098209489175611283447398533996544917135260269420189006477015409447111927460941414850738156996229655517315820009326496289302981914549740075704",5120);  // e^100 to 2000 digits, 2**(5120/36) approx e^98, so this should be sufficient
dataType  exp_log::icutoff("3.7200759760208359629596958038631183373588922923767819671206138766632904758958157181571187786422814966019356176423110698002479856420525356002661856882839075574388191160228448691497585855102816611741608772370701345082175755257496876380478927279529400619796226477050521097935092405571614981699373980650794385017392666116669084820355852767349264735965334012351124155701888556061321555667237597483279943081580558200024056409183262450014951041586620279643656264467968894700938792916253255010632221763201652793349803890940595605841387700084416215401241414250077825665415983690976009984961360256741194034138394876803053675603933303024744374653773839194398038121139359125933653297313729648143976166336520673348980461778859401010683612172841192267048400425004764508588337164109104471417030091130627994341444231066706516056224806307366477189562093200105917436971137491249210033293900430897537565423172999833214900502508075872900588421204281475924063823292973631318571589947459571703042377804754941621424437113862518290746927485863623786622859832378012881049169617760176862696216558072456587817255966013144952765304757134856786559621371530689004919690264156056189852825205107459919264894156821038879821029806124904974865166767104133263545776864862531401906746162552449349603769218389743440655258996554293652331799176639562954681427357423231580166547147688310559099303479744266724881346274977961440112943499071264470226893058783022463208022650929652330632131158464541156487240776613336314969190478460840171194509647305613611013783547459541868557164448510514297712797926643607276989277319032007732778055623728368338954280601798401673533414151747048403307256095313267321288515880562552036887361422448023987229118282591548353228901821059980653617980769692246437867808333281469498189086260330578909164433221661212477576799998254088101941275077244811703736732956426516519991762578313739382544041932858310458675271806803542212226085576954101576412829521442837345396822629586279162068787207421866334365148339401781463525e-44",5120);  // e^100 to 2000 digits, 2**(5120/36) approx e^98, so this should be sufficient
// for log, see  http://rnc7.loria.fr/brent_invited.pdf or sasaki and Kanada log

void exp_log::halve(dataType x, dataType &xh, int &n) {
  xh = x;
  n = 0;
  while (xh > 1 || xh < -1) {
    xh /= 2;
    n++;
  }
}

dataType exp_log::exponentiate(dataType x) {
  dataType xn[MAXPOW];
  int bincount[MAXPOW];
  for (int i = 0; i < MAXPOW; ++i) bincount[i] = 0;
  xn[0] = 1;
  xn[1] = x;
  int maxpow2 = 1;
  for (int i = 2; i < MAXPOW; ++i) {
    if (i/2 == maxpow2) { // update list of squares as neeeded
      xn[i] = xn[maxpow2] * xn[maxpow2];
      maxpow2 *= 2;
    }
    else { // work out value from products of lower powers of 2
      xn[i] = xn[maxpow2]; // leading bit
      int k = i - maxpow2;
      int m = maxpow2/2;
      while (k > 0) {
        if (k >= m) {
          xn[i] *= xn[m];
          k -= m;
        }
        m /= 2;
      }
    }
  }
  dataType fac = 1;
  for (int i = 2; i < MAXPOW; ++i) {
    fac *= i;
//    std::cout << i << " " << xn[i] << "\n";
    xn[i] /= fac;
  }
  dataType val = 1;
  for (int i = 1; i < MAXPOW; ++i) {
//    std::cout << i << " " << xn[i] << "\n";
    val += xn[i];
  }
  return val;
}

void exp_log::resquare(dataType &xhalved, int n) {
  for (int i = 0; i < n; ++i)
    xhalved = xhalved * xhalved;
}

dataType exp_log::agm(const dataType &ain, const dataType &bin) {
  dataType a = ain;
  dataType b = bin;
  dataType at;
  for (int i = 0; i < 24; ++i) {
    at = (a+b)/2;
    b = sqrt(a*b);
    a = at;
  }
  return a;
}

dataType exp_log::find_log(const dataType &x) {
  int prec = x.get_prec();
  if (prec > 5120) { std::cerr << "Need to build code with more precision.\n"; exit(-1);}
  int invflag = 0;
  dataType q; 
  if (x < 1) {
    invflag = 1;
    q = x;
  } else {
    q = 1/x;
  }
  // make q < 2^{-prec/36}
  int shiftexp = 0;
  if (q > icutoff) {
    shiftexp = 100;
    q *= icutoff;
  }
  dataType t2_4, t3_4;

  dataType two = q * q;
  dataType four = two * two;
  dataType eight = four * four;
  dataType sixteen = eight * eight;
  dataType nine = eight * q;
  dataType twentyfive = sixteen * nine;
  t2_4 = 2 * (q + nine + twentyfive);
  t3_4 = 1 + 2 * ( four + sixteen);
  dataType L = pi/4/agm(t2_4*t2_4,t3_4*t3_4);
  L -= shiftexp;
  if (invflag) L = -L;
  return L;
}

bool exp_log::close(const dataType &a, const dataType &b, int threshold) {
  if (a == b) return true;
  if (b == 0 || a == 0) return false;  // this must follow the equality check
  if (a < 0 && b > 0) return false;
  if (a > 0 && b < 0) return false;
  dataType c;
  if (a > b) c = (a-b)/b;
  else c = (b-a)/a;
  dataType l = find_log(c);
  if (l < -threshold) return true;
  return false;
}
